#!/bin/bash
{{- if or (eq .chezmoi.os "linux") (eq .chezmoi.os "darwin") }}
# chezmoi:run-onchange-hash: {{ .packages | toJson | sha256sum }}

# Color definitions
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get system info
OS="{{ .chezmoi.os }}"
SYSTEM_ROLE="{{ .system | default "client" }}"
echo "OS: $OS, System role: $SYSTEM_ROLE"

# Function to setup Homebrew environment if not available
setup_homebrew_env() {
    echo -e "${BLUE}Attempting to setup Homebrew environment...${NC}"
    
    # Collect all possible Homebrew installation paths
    local possible_brew_paths=(
        "/opt/homebrew/bin/brew"          # Apple Silicon Mac (ARM64)
        "/usr/local/bin/brew"             # Intel Mac (x86_64)
        "/home/linuxbrew/.linuxbrew/bin/brew"  # Linux Homebrew
        "/usr/local/homebrew/bin/brew"    # Alternative Linux path
        "$HOME/.linuxbrew/bin/brew"       # User-specific Linux installation
        "/opt/local/bin/brew"             # Alternative installation
    )
    
    # Find the actual brew installation
    local brew_path=""
    for path in "${possible_brew_paths[@]}"; do
        if [[ -x "$path" ]]; then
            brew_path="$path"
            echo -e "${GREEN}Found Homebrew at: $brew_path${NC}"
            break
        fi
    done
    
    # Setup environment if brew was found
    if [[ -n "$brew_path" && -x "$brew_path" ]]; then
        echo -e "${BLUE}Setting up Homebrew environment using: $brew_path${NC}"
        eval "$("$brew_path" shellenv)"
        return 0
    else
        echo -e "${YELLOW}Could not locate Homebrew installation.${NC}"
        return 1
    fi
}

# Function to install Homebrew packages
install_brew_packages() {
    local packages=("$@")
    
    if [ ${#packages[@]} -eq 0 ]; then
        echo "No brew packages to install"
        return 0
    fi
    
    # Check if Homebrew is available
    if ! command -v brew &> /dev/null; then
        echo -e "${YELLOW}Homebrew command not found in PATH, attempting to setup environment...${NC}"
        
        # Try to setup Homebrew environment
        if setup_homebrew_env; then
            # Check again after setting up environment
            if ! command -v brew &> /dev/null; then
                echo -e "${RED}Homebrew still not available after environment setup${NC}"
                echo -e "${YELLOW}Skipping brew packages: ${packages[*]}${NC}"
                if [ "$OS" = "linux" ]; then
                    exit 1
                else
                    return 1
                fi
            else
                echo -e "${GREEN}Homebrew environment setup successful!${NC}"
            fi
        else
            echo -e "${RED}Failed to setup Homebrew environment${NC}"
            echo -e "${YELLOW}Skipping brew packages: ${packages[*]}${NC}"
            if [ "$OS" = "linux" ]; then
                exit 1
            else
                return 1
            fi
        fi
    fi
    
    echo "Installing packages with Homebrew: ${packages[*]}"
    
    # Use different installation methods based on OS
    if [ "$OS" = "darwin" ]; then
        # macOS: Use brew bundle for better handling of failures
        set +e
        
        # Create temporary Brewfile
        local brewfile_content=""
        for package in "${packages[@]}"; do
            brewfile_content="${brewfile_content}brew \"${package}\"\n"
        done
        
        echo -e "$brewfile_content" | brew bundle --verbose --file=/dev/stdin
        local brew_exit_code=$?
        
        if [ $brew_exit_code -ne 0 ]; then
            echo "Caution: brew bundle installation is not fully succeed."
        fi
        
        set -e
    else
        # Linux: Direct brew install
        brew install "${packages[@]}" || echo "Warning: Some brew packages failed to install"
    fi
}

# Function to install cask packages (macOS only)
install_cask_packages() {
    local packages=("$@")
    
    if [ "$OS" != "darwin" ] || [ ${#packages[@]} -eq 0 ]; then
        return 0
    fi
    
    echo "Installing cask packages: ${packages[*]}"
    
    set +e
    
    # Create temporary Brewfile for casks
    local brewfile_content=""
    for package in "${packages[@]}"; do
        brewfile_content="${brewfile_content}cask \"${package}\"\n"
    done
    
    echo -e "$brewfile_content" | brew bundle --verbose --file=/dev/stdin
    local brew_exit_code=$?
    
    if [ $brew_exit_code -ne 0 ]; then
        echo "Caution: cask installation is not fully succeed."
    fi
    
    set -e
}

# Collect packages to install
brew_packages=()
cask_packages=()

{{- if eq .chezmoi.os "linux" }}
# Linux brew packages
{{- range .packages.linux.brew.common }}
brew_packages+=("{{ . }}")
{{- end }}

{{- if eq .system "client" }}
{{- range .packages.linux.brew.client }}
brew_packages+=("{{ . }}")
{{- end }}
{{- else if eq .system "server" }}
{{- range .packages.linux.brew.server }}
brew_packages+=("{{ . }}")
{{- end }}
{{- end }}

{{- else if eq .chezmoi.os "darwin" }}
# macOS brew packages
{{- range .packages.darwin.brew }}
brew_packages+=("{{ . }}")
{{- end }}

# macOS cask packages
{{- range .packages.darwin.cask }}
cask_packages+=("{{ . }}")
{{- end }}
{{- end }}

echo "Brew packages to install: ${brew_packages[*]}"
{{- if eq .chezmoi.os "darwin" }}
echo "Cask packages to install: ${cask_packages[*]}"
{{- end }}

# Install packages
install_brew_packages "${brew_packages[@]}"
{{- if eq .chezmoi.os "darwin" }}
install_cask_packages "${cask_packages[@]}"
{{- end }}

echo -e "${GREEN}Homebrew package installation completed!${NC}"

{{- end }} 
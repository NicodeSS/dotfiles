#!/bin/bash

{{- if eq .chezmoi.os "darwin" }}
# chezmoi:run-onchange-hash: {{ .packages.darwin.pip | toJson | sha256sum }}
{{- else if eq .chezmoi.os "linux" }}
# chezmoi:run-onchange-hash: {{ .packages.linux.pip | toJson | sha256sum }}
{{- end }}

# Color definitions
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to install pip packages
install_pip_packages() {
    echo "Starting pip package installation..."

    # Check if pip3 is available
    if ! command -v pip3 &> /dev/null; then
        echo ""
        echo -e "${RED}========================================${NC}"
        echo -e "${RED}         ⚠️  PIP NOT AVAILABLE WARNING  ⚠️         ${NC}"
        echo -e "${RED}========================================${NC}"
        echo -e "${YELLOW}pip3 command not found!${NC}"
        echo -e "${YELLOW}Skipping pip package installation...${NC}"
        echo -e "${RED}========================================${NC}"
        echo ""
        return 1
    fi

    echo -e "${GREEN}✓ pip available, starting Python package installation${NC}"

    # Collect pip packages to install
    local pip_packages=()

    # Add packages based on operating system
    {{- if eq .chezmoi.os "darwin" }}
        {{- range .packages.darwin.pip }}
    pip_packages+=("{{ . }}")
        {{- end }}
    {{- else if eq .chezmoi.os "linux" }}
        # Add common packages
        {{- range .packages.linux.pip.common }}
    pip_packages+=("{{ . }}")
        {{- end }}
        
        # Add specific packages based on system role
        {{- if eq (.system | default "client") "client" }}
            {{- range .packages.linux.pip.client }}
    pip_packages+=("{{ . }}")
            {{- end }}
        {{- else if eq (.system | default "client") "server" }}
            {{- range .packages.linux.pip.server }}
    pip_packages+=("{{ . }}")
            {{- end }}
        {{- end }}
    {{- end }}

    if [ ${#pip_packages[@]} -gt 0 ]; then
        echo -e "${BLUE}Installing pip packages: ${pip_packages[*]}${NC}"
        for package in "${pip_packages[@]}"; do
            echo -e "${GREEN}Installing pip package: $package${NC}"
            if pip3 install "$package" --user; then
                echo -e "${GREEN}✓ $package installed successfully${NC}"
            else
                echo -e "${RED}✗ Warning: pip package $package installation failed${NC}"
            fi
        done
    else
        echo -e "${YELLOW}No pip packages to install${NC}"
    fi

    echo -e "${GREEN}Pip package installation completed!${NC}"
}

# If script is executed directly, run the installation function
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    install_pip_packages
fi 
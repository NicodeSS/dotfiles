{{ if eq .chezmoi.os "linux" -}}
#!/bin/bash
# chezmoi:run-onchange-hash: {{ .packages.linux | toJson | sha256sum }}
# 检测Linux发行版
if [ -f /etc/os-release ]; then
    . /etc/os-release
    DISTRO=$ID
elif [ -f /etc/redhat-release ]; then
    DISTRO="rhel"
elif [ -f /etc/debian_version ]; then
    DISTRO="debian"
else
    echo "Cannot detect Linux distribution, exiting"
    exit 1
fi

echo "Detected distribution: $DISTRO"

# 从chezmoi配置中获取系统角色
SYSTEM_ROLE="{{ .system | default "client" }}"
echo "System role: $SYSTEM_ROLE"

# 安装internal包的函数（批量安装）
install_internal_packages() {
    local packages=("$@")
    
    if [ ${#packages[@]} -eq 0 ]; then
        echo "No internal packages to install"
        return 0
    fi
    
    case $DISTRO in
        ubuntu|debian)
            echo "Installing packages with apt: ${packages[*]}"
            sudo apt update
            sudo apt install -y "${packages[@]}" || echo "Warning: Some packages failed to install"
            ;;
        fedora|rhel|centos)
            echo "Installing packages with dnf/yum: ${packages[*]}"
            if command -v dnf &> /dev/null; then
                PKG_MANAGER="dnf"
            else
                PKG_MANAGER="yum"
            fi
            sudo $PKG_MANAGER install -y "${packages[@]}" || echo "Warning: Some packages failed to install"
            ;;
        arch|manjaro)
            echo "Installing packages with pacman: ${packages[*]}"
            sudo pacman -Sy --needed --noconfirm "${packages[@]}" || echo "Warning: Some packages failed to install"
            ;;
        opensuse|opensuse-leap|opensuse-tumbleweed)
            echo "Installing packages with zypper: ${packages[*]}"
            sudo zypper install -y "${packages[@]}" || echo "Warning: Some packages failed to install"
            ;;
        *)
            echo "Unsupported distribution: $DISTRO"
            echo "Supported distributions: ubuntu, debian, fedora, rhel, centos, arch, manjaro, opensuse"
            return 1
            ;;
    esac
}

# 安装Homebrew包的函数
install_brew_packages() {
    local packages=("$@")
    
    if [ ${#packages[@]} -eq 0 ]; then
        echo "No brew packages to install"
        return 0
    fi
    
    # 简单检查Homebrew是否可用
    if ! command -v brew &> /dev/null; then
        echo "Homebrew not installed, skipping brew packages: ${packages[*]}"
        return 0
    fi
    
    echo "Installing packages with Homebrew: ${packages[*]}"
    brew install "${packages[@]}" || echo "Warning: Some brew packages failed to install"
}

# 收集要安装的包
internal_packages=()
brew_packages=()

# 添加common包
{{ range .packages.linux.internal.common -}}
internal_packages+=("{{ . }}")
{{ end -}}

# 根据chezmoi模板变量.system判断添加特定包
{{- if eq .system "client" }}
{{- range .packages.linux.internal.client }}
internal_packages+=("{{ . }}")
{{- end }}
{{- else if eq .system "server" }}
{{- range .packages.linux.internal.server }}
internal_packages+=("{{ . }}")
{{- end }}
{{- end }}

# 添加brew common包
{{ range .packages.linux.brew.common -}}
brew_packages+=("{{ . }}")
{{ end -}}

# 根据系统角色添加brew特定包
{{- if eq .system "client" }}
{{- range .packages.linux.brew.client }}
brew_packages+=("{{ . }}")
{{- end }}
{{- else if eq .system "server" }}
{{- range .packages.linux.brew.server }}
brew_packages+=("{{ . }}")
{{- end }}
{{- end }}

echo "Internal packages to install: ${internal_packages[*]}"
echo "Brew packages to install: ${brew_packages[*]}"

# 安装包
install_internal_packages "${internal_packages[@]}"
install_brew_packages "${brew_packages[@]}"

# 安装 pipx 包
echo "开始安装 pipx 包..."

# 颜色定义
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 检查 pipx 是否可用
if ! command -v pipx &> /dev/null; then
    echo ""
    echo -e "${RED}========================================${NC}"
    echo -e "${RED}         ⚠️  PIPX 不可用警告  ⚠️         ${NC}"
    echo -e "${RED}========================================${NC}"
    echo -e "${YELLOW}pipx 命令未找到！${NC}"
    echo ""
    echo -e "${BLUE}可能的解决方案:${NC}"
    echo -e "  1. 检查是否已安装 pipx:"
    case $DISTRO in
        ubuntu|debian)
            echo -e "     ${GREEN}dpkg -l | grep pipx${NC}"
            echo -e "     如果未安装: ${GREEN}sudo apt install pipx${NC}"
            ;;
        fedora|rhel|centos)
            echo -e "     ${GREEN}rpm -qa | grep pipx${NC}"
            if command -v dnf &> /dev/null; then
                echo -e "     如果未安装: ${GREEN}sudo dnf install pipx${NC}"
            else
                echo -e "     如果未安装: ${GREEN}sudo yum install pipx${NC}"
            fi
            ;;
        arch|manjaro)
            echo -e "     ${GREEN}pacman -Q pipx${NC}"
            echo -e "     如果未安装: ${GREEN}sudo pacman -S python-pipx${NC}"
            ;;
        opensuse|opensuse-leap|opensuse-tumbleweed)
            echo -e "     ${GREEN}zypper search --installed-only pipx${NC}"
            echo -e "     如果未安装: ${GREEN}sudo zypper install pipx${NC}"
            ;;
        *)
            echo -e "     ${GREEN}which pipx${NC}"
            echo -e "     或使用 pip 安装: ${GREEN}pip install --user pipx${NC}"
            ;;
    esac
    echo ""
    echo -e "  2. 确保 pipx 在 PATH 中:"
    echo -e "     ${GREEN}pipx ensurepath${NC}"
    echo ""
    echo -e "  3. 重新加载 shell 配置:"
    echo -e "     ${GREEN}source ~/.bashrc${NC} 或 ${GREEN}source ~/.zshrc${NC}"
    echo ""
    echo -e "${YELLOW}跳过 pipx 包安装...${NC}"
    echo -e "${RED}========================================${NC}"
    echo ""
    exit 0
fi

echo -e "${GREEN}✓ pipx 可用，开始安装 Python 包${NC}"

# 安装 pipx 包的函数
install_pipx_packages() {
    local packages=("$@")
    
    if [ ${#packages[@]} -eq 0 ]; then
        echo -e "${YELLOW}没有 pipx 包需要安装${NC}"
        return 0
    fi
    
    echo -e "${BLUE}安装 pipx 包: ${packages[*]}${NC}"
    for package in "${packages[@]}"; do
        echo -e "${GREEN}正在安装 pipx 包: $package${NC}"
        if pipx install "$package"; then
            echo -e "${GREEN}✓ $package 安装成功${NC}"
        else
            echo -e "${RED}✗ 警告: pipx 包 $package 安装失败${NC}"
        fi
    done
}

# 收集要安装的 pipx 包
pipx_packages=()

# 添加 common 包
{{ range .packages.linux.pip.common -}}
pipx_packages+=("{{ . }}")
{{ end -}}

# 根据系统角色添加特定包
{{- if eq .system "client" }}
{{- range .packages.linux.pip.client }}
pipx_packages+=("{{ . }}")
{{- end }}
{{- else if eq .system "server" }}
{{- range .packages.linux.pip.server }}
pipx_packages+=("{{ . }}")
{{- end }}
{{- end }}

echo -e "${BLUE}要安装的 pipx 包: ${pipx_packages[*]}${NC}"

# 安装包
install_pipx_packages "${pipx_packages[@]}"

echo -e "${GREEN}Package installation completed!${NC}"

{{ end -}} 
{{ if eq .chezmoi.os "linux" -}}
#!/bin/bash
# chezmoi:run-onchange-hash: {{ .packages | toJson | sha256sum }}
# 检测Linux发行版
if [ -f /etc/os-release ]; then
    . /etc/os-release
    DISTRO=$ID
elif [ -f /etc/redhat-release ]; then
    DISTRO="rhel"
elif [ -f /etc/debian_version ]; then
    DISTRO="debian"
else
    echo "Cannot detect Linux distribution, exiting"
    exit 1
fi

echo "Detected distribution: $DISTRO"

# 从chezmoi配置中获取系统角色
SYSTEM_ROLE="{{ .system | default "client" }}"
echo "System role: $SYSTEM_ROLE"

# 安装internal包的函数（批量安装）
install_internal_packages() {
    local packages=("$@")
    
    if [ ${#packages[@]} -eq 0 ]; then
        echo "No internal packages to install"
        return 0
    fi
    
    case $DISTRO in
        ubuntu|debian)
            echo "Installing packages with apt: ${packages[*]}"
            sudo apt update
            sudo apt install -y "${packages[@]}" || echo "Warning: Some packages failed to install"
            ;;
        fedora|rhel|centos)
            echo "Installing packages with dnf/yum: ${packages[*]}"
            if command -v dnf &> /dev/null; then
                PKG_MANAGER="dnf"
            else
                PKG_MANAGER="yum"
            fi
            sudo $PKG_MANAGER install -y "${packages[@]}" || echo "Warning: Some packages failed to install"
            ;;
        arch|manjaro)
            echo "Installing packages with pacman: ${packages[*]}"
            sudo pacman -Sy --needed --noconfirm "${packages[@]}" || echo "Warning: Some packages failed to install"
            ;;
        opensuse|opensuse-leap|opensuse-tumbleweed)
            echo "Installing packages with zypper: ${packages[*]}"
            sudo zypper install -y "${packages[@]}" || echo "Warning: Some packages failed to install"
            ;;
        *)
            echo "Unsupported distribution: $DISTRO"
            echo "Supported distributions: ubuntu, debian, fedora, rhel, centos, arch, manjaro, opensuse"
            return 1
            ;;
    esac
}

# 安装Homebrew包的函数
install_brew_packages() {
    local packages=("$@")
    
    if [ ${#packages[@]} -eq 0 ]; then
        echo "No brew packages to install"
        return 0
    fi
    
    # 简单检查Homebrew是否可用
    if ! command -v brew &> /dev/null; then
        echo "Homebrew not installed, skipping brew packages: ${packages[*]}"
        return 0
    fi
    
    echo "Installing packages with Homebrew: ${packages[*]}"
    brew install "${packages[@]}" || echo "Warning: Some brew packages failed to install"
}

# 收集要安装的包
internal_packages=()
brew_packages=()

# 添加common包
{{ range .packages.linux.internal.common -}}
internal_packages+=("{{ . }}")
{{ end -}}

# 根据chezmoi模板变量.system判断添加特定包
{{- if eq .system "client" }}
{{- range .packages.linux.internal.client }}
internal_packages+=("{{ . }}")
{{- end }}
{{- else if eq .system "server" }}
{{- range .packages.linux.internal.server }}
internal_packages+=("{{ . }}")
{{- end }}
{{- end }}

# 添加brew common包
{{ range .packages.linux.brew.common -}}
brew_packages+=("{{ . }}")
{{ end -}}

# 根据系统角色添加brew特定包
{{- if eq .system "client" }}
{{- range .packages.linux.brew.client }}
brew_packages+=("{{ . }}")
{{- end }}
{{- else if eq .system "server" }}
{{- range .packages.linux.brew.server }}
brew_packages+=("{{ . }}")
{{- end }}
{{- end }}

echo "Internal packages to install: ${internal_packages[*]}"
echo "Brew packages to install: ${brew_packages[*]}"

# 安装包
install_internal_packages "${internal_packages[@]}"
install_brew_packages "${brew_packages[@]}"

# 安装 pip 包
echo "开始安装 pip 包..."

# 检查并安装 pip 的函数
ensure_pip_installed() {
    if command -v pip3 &> /dev/null; then
        PIP_CMD="pip3"
        return 0
    elif command -v pip &> /dev/null; then
        PIP_CMD="pip"
        return 0
    else
        echo "pip 未安装，尝试安装 python3-pip..."
        case $DISTRO in
            ubuntu|debian)
                sudo apt install -y python3-pip
                ;;
            fedora|rhel|centos)
                if command -v dnf &> /dev/null; then
                    sudo dnf install -y python3-pip
                else
                    sudo yum install -y python3-pip
                fi
                ;;
            arch|manjaro)
                sudo pacman -S --needed --noconfirm python-pip
                ;;
            opensuse|opensuse-leap|opensuse-tumbleweed)
                sudo zypper install -y python3-pip
                ;;
            *)
                echo "不支持的发行版，无法安装 pip: $DISTRO"
                return 1
                ;;
        esac
        
        # 重新检查 pip
        if command -v pip3 &> /dev/null; then
            PIP_CMD="pip3"
            return 0
        elif command -v pip &> /dev/null; then
            PIP_CMD="pip"
            return 0
        else
            echo "pip 安装失败"
            return 1
        fi
    fi
}

# 安装 pip 包的函数
install_pip_packages() {
    local packages=("$@")
    
    if [ ${#packages[@]} -eq 0 ]; then
        echo "没有 pip 包需要安装"
        return 0
    fi
    
    echo "安装 pip 包: ${packages[*]}"
    $PIP_CMD install --user "${packages[@]}" || echo "警告: 一些 pip 包安装失败"
}

# 确保 pip 已安装
if ensure_pip_installed; then
    echo "使用 pip 命令: $PIP_CMD"
    
    # 收集要安装的 pip 包
    pip_packages=()
    
    # 添加 common 包
    {{ range .packages.linux.pip.common -}}
    pip_packages+=("{{ . }}")
    {{ end -}}
    
    # 根据系统角色添加特定包
    {{- if eq .system "client" }}
    {{- range .packages.linux.pip.client }}
    pip_packages+=("{{ . }}")
    {{- end }}
    {{- else if eq .system "server" }}
    {{- range .packages.linux.pip.server }}
    pip_packages+=("{{ . }}")
    {{- end }}
    {{- end }}
    
    echo "要安装的 pip 包: ${pip_packages[*]}"
    
    # 安装包
    install_pip_packages "${pip_packages[@]}"
else
    echo "无法安装 pip，跳过 pip 包安装"
fi

echo "Package installation completed!"

{{ end -}} 